战斗部分思路整理
由于要做跳过战斗，不能一边实时进行画面更新计算，一边记录，最后战斗打完并得到战报，所以将战斗的逻辑计算和战斗的画面演示分成两个独立的部分进行处理。

战斗逻辑计算 ————> 完整事件战报 ————> 战斗演示

*战斗逻辑计算
入口为BattleCore类
StartBattle传入两个队伍列表<九宫格位置, 玩家怪物UserMonster>
	* 初始化战斗数据 BattleData 记录了战斗场上情况 队伍信息 游戏模拟时间 等等
	* 初始化地图
	* 初始化双方队伍 包括创建战斗单位
	* 进行战斗
	* 生成战报

*关于战斗模拟过程
t=0起始, 更新怪物位置Move, 逻辑执行updateSelfAction, 计算buff/debuff, 计算场面效果
值到一方全部死亡(可扩展 t>限时 算平局等)

*战斗单位设计
接口: BattleMonsterActionInterface
	包含Born,Move,Attack,Die等通用动作
抽象类: BattleMonsterBase
	包含怪物基础属性
	battleUnitId 战斗时用的索引id 在创建战斗单位时增序分配
	userMonsterId 对应的玩家怪物实际编号
	monsterRealPosX,Y 怪物在地图上的实际位置, 用于模拟战斗时的怪物移动情况计算
	monsterIndexX,Y 怪物当前所属的格子, 怪物位置判定时用
	monsterTargetIndexX,Y 怪物目标格子, 移动时的目标, 也防止多个怪物向同一个点移动
	movingX,Y 怪物移动速度
	icon, hp, atkType ... , range 怪物的基础属性
	team 所属队伍
	status 状态: Idle, 准备完毕, 移动中, 攻击中, 死亡...
	targetMonster  攻击目标
	attackIntervalAddUp 攻速累计
具体怪物继承BattleMonsterBase
实现其中方法 参照TestConcreteMonster
通过BattleMonsterFactory来产出怪物

*BattleMapUtil提供了一些用于地图计算的辅助方法
地图tile状态包括: None 空闲 Monster 有怪物 Occupied 格子已被锁定(有怪物正向该格移动等) Obstacle 障碍物

*BattleReportGenerater用于生成战报
其中最重要的为每个单位的动作事件，包含(执行对象，事件类型，执行时间，辅助值)

*战斗演示部分
*BattleReplayMgr 用于读取解析战报Json字符串

*战斗演示单位
BaseMonsterShower 抽象类
所有实际怪物继承BaseMonsterShower 并拥有自己的animator 单独编辑 参考TestConcreteMonsterShower
战斗演示单位通过BattleMonsterPrefabFactory来创建，该工厂拥有一个所有怪物的Prefab映射数组

*BattleReplayPage 为测试战斗的界面
加载时创建并挂在工厂脚本
获取战报json字符串进行解析
根据双方队伍创建出怪物，并生成字典<战斗单位id, 战斗单位>
将所有战报按时间放入队列中
根据时间依次执行各个单位的行动